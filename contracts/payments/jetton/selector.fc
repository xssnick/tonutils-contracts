#include "../common/base.fc";
#include "part.fc";
#include "../common/constants.fc";
#include "../common/globals.fc";
#include "../../imports/stdlib.fc";


() recv_any(slice msg) impure {
    ;; Note, operators of channels are always off-chain parties, not contracts
    ;; thus no responses and query_ids
    int op = msg~load_op();
    if(op == op::deploy_channel) {
      return deploy_channel();
    } elseif(op == op::take_wallet_address) {
      return install_jetton_wallet(msg);
    } elseif(op == op::transfer_notification) {
        return accept_jettons(msg);
    } elseif(op == op::init_channel) {
        return init_channel(msg);
    } elseif (op == op::cooperative_close){
        return cooperative_close(msg);
    } elseif (op == op::cooperative_commit){
        return cooperative_commit(msg);
    } elseif (op == op::start_uncooperative_close){
        return start_uncooperative_close(msg);
    } elseif (op == op::challenge_quarantined_state){
        return challenge_quarantined_state(msg);
    } elseif (op == op::settle_conditionals){
        return settle_conditionals(msg);
    } elseif (op == op::finish_uncooperative_close){
        return finish_uncooperative_close();
    }
    throw(0xffff);
}


() recv_internal(int in_msg_value, cell in_msg_full, slice in_msg_body) {
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    sender = cs~load_msg_addr();
    msg_value = in_msg_value;

    return recv_any(in_msg_body);
}


() recv_external (slice in_msg) {
    ;; Note, only cooperative_close and cooperative_commit
    ;; will be accepted
    return recv_any(in_msg);
}
