#include "../../imports/stdlib.fc";
#include "../common/extlib.fc";
#include "../common/constants.fc";
#include "../common/globals.fc";


() load_storage (int level) impure {
    storage_parse_level = level;
    slice cs = get_data().begin_parse();
    inited = cs~load_int(1);
    balance_A = cs~load_coins();
    balance_B = cs~load_coins();
    key_A = cs~load_uint(256);
    key_B = cs~load_uint(256);
    channel_id = cs~load_uint(128);
    cs~load_closure_config();
    if(level >= storage::up_to_quarantin) {
        commited_seqno_A = cs~load_uint(32);
        commited_seqno_B = cs~load_uint(32);
        quarantin = cs~load_maybe_ref();
    }
    if(level >= storage::full) {
        payment_config = cs~load_ref();
    }
    unparsed_storage = cs;
}


() save_storage () impure {
    int level = storage_parse_level;
    builder storage = begin_cell();
    storage = storage.store_int(inited, 1)
            .store_coins(balance_A)
            .store_coins(balance_B)
            .store_uint(key_A, 256)
            .store_uint(key_B, 256)
            .store_uint(channel_id, 128)
            .store_closure_config();
    if(level >= storage::up_to_quarantin) {
        storage = storage.store_uint(commited_seqno_A, 32)
                .store_uint(commited_seqno_B, 32)
                .store_maybe_ref(quarantin);
    }
    if(level >= storage::full){
        storage = storage.store_ref(payment_config);
    } else {
        storage = storage.store_slice(unparsed_storage);
    }
    set_data(storage.end_cell());
}


;; top_up_balance add_A:Coins add_B:Coins = InternalMsgBody;
() top_up_balance(slice msg) impure {
    load_storage(storage::balances_and_keys);
    throw_unless(error::already_inited, ~ inited);
    int add_A = msg~load_coins();
    int add_B = msg~load_coins();
    balance_A += add_A;
    balance_B += add_B;
    ;; depositor pay gas fees for himself
    throw_unless(error::not_enough_money_for_init, balance_A + balance_B <= (get_balance().pair_first()));
    return save_storage();
}


;; init_channel is_A:Bool signature:bits512 tag:# {tag = 0x696e6974} channel_id:uint128 balance_A:Coins balance_B:Coins = InternalMsgBody;
() init_channel(slice msg) impure {
    load_storage(storage::full);
    throw_unless(error::already_inited, ~ inited);
    int is_A = msg~load_bool();
    slice signature = msg~load_bits(SIGNATURE_SIZE);
    throw_unless(error::not_authorized,
            check_signature(slice_hash(msg), signature, is_A ? key_A : key_B));
    throw_unless(error::wrong_tag, msg~load_uint(TAG_SIZE) == tag::init);
    throw_unless(error::wrong_channel_id, channel_id == msg~load_uint(CHANNEL_ID_SIZE));
    int set_balance_A = msg~load_coins();
    int set_balance_B = msg~load_coins();
    throw_unless(error::not_enough_money_for_init, (set_balance_A >= balance_A) &
            (set_balance_B >= balance_B));
    balance_A = set_balance_A;
    balance_B = set_balance_B;
    slice pcs = payment_config.begin_parse();
    int excess_fee = pcs~load_coins();
    throw_unless(error::not_enough_money_for_init, balance_A + balance_B + excess_fee < (get_balance().pair_first()));
    inited = true;
    return save_storage();
}


() send_payout(slice s_addr, int amount, int channel_id, int flags) impure {
    send_raw_message(begin_cell()
            ;; see "Message X" description in crypto/block/block.tlb
            ;; or https://ton.org/docs/#/smart-contracts/messages?id=sending-messages
            .store_uint(0x10, 6)                          ;; 0x10 = 0b010000 = {0, 1, 0 , 0, 00}
            ;; First 0 means int_msg_info$0 tag
            ;; 1 0 0 are flags (ihr_disabled, bounce, bounced)
            ;; 00 is a source address addr_none$00 tag,
            ;; correct value added automatically
            .store_slice(s_addr)                          ;; destination address
            .store_grams(amount)                          ;; stake value
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)   ;; 1 zero bit means there is no other:ExtraCurrencyCollection
            ;; 4 + 4 zero bits for empty ihr_fee:Grams and fwd_fee:Grams,
            ;; correct values added automatically
            ;; 64 + 32 zero bits for created_lt:uint64 and created_at:uint32,
            ;; correct values added automatically, see "CommonMsgInfo" description
            ;; 1 zero bit means there is no StateInit structure
            ;; 1 zero bit means the message body is represented
            ;; in this cell, not in reference
            ;; The following bits are the message body
            .store_uint(op::channel_closed, 32)
            .store_uint(channel_id, 128)
            .end_cell(), flags);
}


() close_channel() impure {
    slice pcs = payment_config.begin_parse();
    int excess_fee = pcs~load_coins();
    (slice addr_A, slice addr_B) = (pcs~load_msg_addr(), pcs~load_msg_addr());
    int total_contract_balance = get_balance().pair_first();
    int mode_B = 2;  ;; in case balance_B less than forward fees
    if(balance_B > total_contract_balance) {
        mode_B = 128;
    }
    send_payout(addr_B, balance_B, channel_id, mode_B);
    send_payout(addr_A, balance_A, channel_id, 2 + 128);

    ;; while channel contract will be emptied it will survive for some time
    ;; by clearing storage we allow immediately reopen channel with the same configs
    inited = false;
    balance_A = 0;
    balance_B = 0;
    quarantin = null();
    save_storage();
}
